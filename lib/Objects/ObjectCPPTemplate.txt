#include "[ObjectName].h"
#include "../roomstate.h"

[ObjectName]::[ObjectName](int xi, int yi, int wi, int hi, bool ci, std::string namei, SDL_Renderer* ri) : Object(xi, yi, wi, hi, ci, namei){
	//Load image
    texture = createTexture("./assets/sprites/[sprite_sheet_name].bmp", ri);
}

[ObejctName]::~[ObjectName](){
    SDL_DestroyTexture(texture);
}

//Implement object logic here
void [ObjectName]::update(int x_in, int y_in){
    /*Examples
    * Collision Detection:
    *   arg1: some object
    *   arg2: some object
    * bool boolean = [ObjectName]->rectCollision([SomeObject], [SomeObject]);
    *
    * Apply physics to object 
    *   arg1: object to apply too
    *   arg2: force vector
    * std::vector<int> velocity = Object::applyPhysics([SomeObject], std::vector<int>{x_in, y_in});
    * 
    * std::vector<Object*> objects: Each object instance has data about all other objects in a given room
    *
    * setX(int x): Set object X
    * setY(int y): SEt object y
	*
		Full Example
		//if in the air, cant jump
		if(airborne){
			y_in = 0;
			x_in = 0;
		}
		//Collision detection
		std::vector<int> fut = Object::applyPhysics(this, std::vector<int>{x_in,y_in});
		Object* future = new Object(fut[0], fut[1],w,h,"Future");
		if(objects.size() > 1){
			bool col = future->rectCollision(future, objects[1]);//Check collision with floor
			if(!col){ //Airborne
				Object::setX(fut[0]);
				if(fut[1] < this->getY()){//jumping
					airborne = true;
				}
				Object::setY(fut[1]);
			}else{ //Collision with floor
				Object::setX(fut[0]);
				vel[0] = 0;
				vel[1] = 0; //Cant move down anymore
				airborne = false;
			}
			delete future;
		}
    */
}

//Implement draw logic here
void [ObjectName]::draw(SDL_Renderer* r){
    /* Examples
    * Animation:
    * int woffset = w * (frame%[Frames in Spritesheet]);
	* SDL_Rect dstrect = {x,y,w,h};
	* SDL_Rect srcrect = {woffset,0,w,h};
	* SDL_RenderCopy(r, texture, &srcrect, &dstrect);
	* frame++;
    */
}
