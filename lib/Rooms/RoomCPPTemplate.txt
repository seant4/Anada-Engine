#include "[Name of Room].h"
#include "../Objects/[Object(s) to include]"
#include "../Object.h"

[NameOfRoom]::~[NameOfRoom](){
    //Typically delete object pointers here
}

[NameOfRoom]::[NameOfRoom](){
    
}

void [NameOfRoom]::create(SDL_Renderer* r){
    // Instantiate variables here
    /* Examples:
    *
    * Handle user input
	* for(int i = 0; i < [Number of possible inputs]; i++){ //set inputs to 0
	* 	inputArray[i] = 0;
	* }
    *
    * Add objects to the room
    * [ObjectName] = new [ObjectName](x,y,w,h,false,"[Name]", r);
    * this->addObject([ObjectName]);
	* for(int i = 0; i < objects.size(); i++){ //Ensures every object has access to eachother in room
	* 	objects[i]->setObjects(objects);
	* }
    background = createTexture("./assets/sprites/[background_texture].bmp", r);
}

void [NameOfRoom]::draw(SDL_Renderer* r){
	//Make sure to render background first	
	SDL_RenderCopy(r, background, NULL, NULL);
	//Render everything else on top	

    /* Examples:
    * 
    * Render object in room:
	* [NameOfObject]->draw(r);
    */

	SDL_RenderPresent(r);
}

// Handle room logic
void [NameOfRoom]::update(int key){
    /* Exaples
    *
	* //Move player controllable Object with physics
	* int prev_x = [NameOfObject]->getX();
	* int prev_y = [NameOfObject]->getY();
	* //Send keyboard input to object
	* int speed = 10;
	* switch(key){
	*	case 1: inputArray[1] = 1; break;
	*	case 2: inputArray[2] = 1; break;
	*	case 3: inputArray[3] = 1; break;
	*	case 4: inputArray[4] = 1; break;
	*	case 5: break;
	*	case 6: inputArray[1] = 0; break;
	*	case 7: inputArray[2] = 0; break;
	*	case 8: inputArray[3] = 0; break;
	*	case 9: inputArray[4] = 0; break;
	* }
	* int x_vel = (inputArray[4] + (-1 * inputArray[3])) * speed;
	* int y_vel = (inputArray[2] + (-1 * inputArray[1])) * speed;
	* [NameOfObject]->update(x_vel, y_vel);
    */

}
